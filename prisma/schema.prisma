// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  characters    PlayerCharacter[]
  messages      Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  message String
  userId  String
}

model AbilityScore {
  id              String              @id @default(cuid())
  name            String              @unique
  abbreviatedName String              @unique
  description     String
  Skill           Skill[]
  boosts          AbilityScoreBoost[]
}

model Skill {
  id             String       @id @default(cuid())
  name           String       @unique
  description    String
  abilityScoreId String
  abilityScore   AbilityScore @relation(fields: [abilityScoreId], references: [id])
}

model Equipment {
  id          String @id @default(cuid())
  name        String
  description String @default("")
  source      Source @relation(fields: [sourceId], references: [id])
  sourceId    String
}

model Source {
  id            String        @id @default(cuid())
  name          String        @unique
  ancestries    Ancestry[]
  backgrounds   Background[]
  playerClasses PlayerClass[]
  equipment     Equipment[]
  feats         Feat[]
  heritages     Heritage[]
}

model PlayerCharacter {
  id                 String                             @id @default(cuid())
  name               String
  user               User                               @relation(fields: [userId], references: [id])
  userId             String
  ancestry           Ancestry                           @relation(fields: [ancestryId], references: [id])
  background         Background                         @relation(fields: [backgroundId], references: [id])
  playerClass        PlayerClass                        @relation(fields: [playerClassId], references: [id])
  ancestryId         String
  backgroundId       String
  playerClassId      String
  abilityScoreBoosts PlayerCharacterAbilityScoreBoost[]
  feats              PlayerCharacterFeat[]
}

model PlayerCharacterFeat {
  playerCharacterId String
  playerCharacter   PlayerCharacter @relation(fields: [playerCharacterId], references: [id])
  featId            String
  feat              Feat            @relation(fields: [featId], references: [id])

  @@unique([playerCharacterId, featId])
}

model Ancestry {
  id              String            @id @default(cuid())
  name            String
  description     String
  hp              Int
  size            String
  speed           Int
  playerCharacter PlayerCharacter[]
  feats           AncestryFeat[]
  heritages       Heritage[]
  source          Source            @relation(fields: [sourceId], references: [id])
  sourceId        String
  boosts          Boost[]

  @@unique([name, sourceId])
}

model Heritage {
  id          String   @id @default(cuid())
  name        String
  description String
  ancestry    Ancestry @relation(fields: [ancestryId], references: [id])
  ancestryId  String
  source      Source   @relation(fields: [sourceId], references: [id])
  sourceId    String
}

model Boost {
  id            String              @id @default(cuid())
  kind          String
  ancestry      Ancestry?           @relation(fields: [ancestryId], references: [id])
  ancestryId    String?
  background    Background?         @relation(fields: [backgroundId], references: [id])
  backgroundId  String?
  playerClass   PlayerClass?        @relation(fields: [playerClassId], references: [id])
  playerClassId String?             @unique
  isBoost       Boolean             @default(true)
  abilityScores AbilityScoreBoost[]
}

model AbilityScoreBoost {
  id                               String                             @id @default(cuid())
  abilityScoreId                   String
  abilityScore                     AbilityScore                       @relation(fields: [abilityScoreId], references: [id])
  boostId                          String
  boost                            Boost                              @relation(fields: [boostId], references: [id])
  playerCharacterAbilityScoreBoost PlayerCharacterAbilityScoreBoost[]

  @@unique([abilityScoreId, boostId])
}

model PlayerCharacterAbilityScoreBoost {
  abilityScoreBoostId String
  abilityScoreBoost   AbilityScoreBoost @relation(fields: [abilityScoreBoostId], references: [id])
  playerCharacterId   String
  playerCharacter     PlayerCharacter   @relation(fields: [playerCharacterId], references: [id])

  @@unique([abilityScoreBoostId, playerCharacterId])
}

model Background {
  id              String            @id @default(cuid())
  name            String
  description     String
  playerCharacter PlayerCharacter[]
  source          Source            @relation(fields: [sourceId], references: [id])
  sourceId        String
  boosts          Boost[]

  @@unique([name, sourceId])
}

model PlayerClass {
  id              String            @id @default(cuid())
  name            String            @unique
  description     String
  playerCharacter PlayerCharacter[]
  feats           PlayerClassFeat[]
  source          Source            @relation(fields: [sourceId], references: [id])
  sourceId        String
  boosts          Boost[]
}

model Feat {
  id               String                @id @default(cuid())
  kind             String
  name             String
  description      String
  level            Int
  playerClasses    PlayerClassFeat[]
  ancestries       AncestryFeat[]
  source           Source                @relation(fields: [sourceId], references: [id])
  sourceId         String
  playerCharacters PlayerCharacterFeat[]

  @@unique([kind, name, sourceId])
}

model AncestryFeat {
  ancestryId String
  featId     String
  ancestry   Ancestry @relation(fields: [ancestryId], references: [id])
  feat       Feat     @relation(fields: [featId], references: [id])

  @@id([ancestryId, featId])
}

model PlayerClassFeat {
  playerClassId String
  featId        String
  playerClass   PlayerClass @relation(fields: [playerClassId], references: [id])
  feat          Feat        @relation(fields: [featId], references: [id])

  @@id([playerClassId, featId])
}
